=============================================================
Level 4: 運用編
=============================================================

運用時に必要となる項目について検討します。
ここでは実際に手をうごかしてもらってもいいですし、
ディスカッションにしていただいても構いません。

アプリケーションの可用性を向上させる
=============================================================

アプリケーションの可用性を挙げるためWorkload APIを使用する
-------------------------------------------------------------

* ReplicaSet
* DaemonSet
* StatefulSet

リリース後に問題発生、データをすべて戻す
-------------------------------------------------------------

アプリケーションはDeploymentでリビジョン管理します。

* アプリケーションはrollout機能ですぐに再デプロイ可能
* データの戻しについても考慮すること？


インフラの可用性を向上させる
=============================================================


ログの確認、デバッグ方法
-------------------------------------------------------------

標準のkubectlだとログがおいづらいときがあるため以下のツールの検討もする。

* kubernetesホストの/var/log/containerにログは保管。(systemd系の場合）
* sternなどのログ管理ツールを活用する
* fluetnd

コンテナクラスタの監視
-------------------------------------------------------------

* 標準の heapster + Grafana + InfluxDB
* Prometheus + Grafana

    * Helm で入れる
    *  helm install stable/prometheus

* k8s Master の冗長化

バックアップはどうするか？
-------------------------------------------------------------

* etcd のバックアップ戦略
* コンテナ化されたアプリケーションからの永続化データ


自律アップグレード
-------------------------------------------------------------

* Deployment

    * rollout

自律アップグレード
-------------------------------------------------------------

kubectl set image deployment/DEPLOYMENT CONTAINER=IMAGE_NAME:TAG



セキュリティアップグレード
-------------------------------------------------------------

例えば、脆弱性があった場合の対処方法はどうすればよいか。

* ノードごとにバージョンアップするため、ある程度の余力を見込んだ設計とする。


DRをどうするか？
-------------------------------------------------------------

別クラスタで作成されたPVはそのままは参照できないので以下の方法を検討する。

* Cluster federation
* CSI (Container Storage Interface)の既存ボリュームのインポートに対応をまつ
* Heptio ark: git clone git@github.com:heptio/ark.git, https://github.com/heptio/ark + SnapMirror


LoadBarancer の可用性をあげる。
-------------------------------------------------------------

外部からのアクセスをうけつけるため、Ingressを使うケースがあるが本番運用を想定した場合の構成方法。