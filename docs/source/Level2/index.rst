==============================================================
Level 2: ステートフルコンテナの実現
==============================================================

ここではデータの永続化について確認します。
コンテナのホストが変わったり、そもそも永続化をしていないため再起動でデータが消えるを体験しどのように解決するかを見ます。

Dynamic storage provisioningの機構や、PV/PVCについての理解を深めるレベルです。


このレベルで習得できるもの
=============================================================

.. todo::


コンテナでの永続データのカテゴライズ
=============================================================

コンテナ化されたアプリケーション、環境での永続データは以下のように分類して考え必要な物をリストアップします。
このラボで必要なものをリストアップしてみましょう。

*


コンテナで永続化が必要なものをリストアップする
=============================================================

本ラボでは以下のイメージを準備しています。
考えられるものとしては以下のようなものがあります。

* データベースのデータファイル、ログファイル
* 各サーバのログファイル
* 設定ファイル
* 共有ファイル

NetApp Trident のインストール
=============================================================

ここではネットアップをバックエンドストレージとして使用するために、NetApp Trident を導入します。
TridentはPodとしてデプロイされ通常のアプリケーションと同様に稼働します。

.. todo:: 通常のインストール手順

.. todo::
バックエンド登録

.. todo::
設計方針について


絵を追加

StorageClassの定義
=============================================================

StorageClass を定義して、ストレージのサービスカタログを作りましょう。

* DB 用の高速領域: SSD を使ったストレージサービス
* Web コンテンツ用のリポジトリ: HDDを使ったストレージサービス

現在のストレージ構成は以下の通りです。

.. todo:: ストレージの構成を記述(設計する) 各SVMにアグリゲートをHDD, SSDを構成する。


.. todo::
StorageClassFastest.yml::

    サンプル


.. todo::
StorageClassCapacity.yml::

    サンプル


Persistent Volume Claimの作成
=============================================================

アプリケーションで必要とされる永続化領域の定義をします。


デプロイに使用したyamlファイルに PVC を追加
=============================================================

Level1 のときに作成した yaml に PVC の項目を追加し、永続化出来るアプリケーションを定義します。

デプロイメント実施
=============================================================

アプリケーションから何かしらのデータを保存するようにします。

アプリケーションの停止
=============================================================

永続化されていることを確認するため、一度アプリケーションを停止します。
可能であればアプリケーションのバージョンアップを行う。

ここでは通常運用のリリースに想定するオペレーションをして、しっかりデータが残っていることを確認します。

再デプロイメント
=============================================================

永続化したデータが参照できることを確認しましょう。


ここまでで Level2 は終了です。
