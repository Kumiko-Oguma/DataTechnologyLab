==============================================================
Level 3: CI／CDパイプラインを構築
==============================================================

本ラボでは Level1, Level2 で行ったオペレーションをベースにCI/CD パイプラインを構築します。
このシナリオではGitにソースがコミットされたら自動でテスト・ビルドを実現するためのツール(Jenkins)をkubernetes上へデプロイ、及び外部公開をします。
そして、ツールがととのったら実際にアプリケーションの変更を行い自動でデプロイするところまでを目指します。

このレベルで習得できるもの
=============================================================

.. image:: resources/cicd_pipeline.png

* アプリケーションをコンテナ化後に自動テスト、自動デプロイできるようにする
* CI/CDパイプラインを作成する
* 副次的にHelmの使い方を習得



実現したいこと
=============================================================

このラボでのCI/CDパイプラインの定義は以下を想定しています。

* テスト実行
* アプリケーションビルド
* コンテナイメージのビルド
* レジストリへコンテナイメージのpush
* アプリケーションデプロイ

Gitは共有で準備しています。

ここではJenkinsをkubernetes上にデプロイしてみましょう。
Git自体も併せてデプロイしてみたいということであればGitLabをデプロイすることをおすすめします。
GitLabを使えばコンテナのCI/CDパイプライン、構成管理、イメージレジストリを兼ねて使用することができます。


Jenkinsのデプロイ
=============================================================

CI/CDパイプラインを実現するためのツールとしてJenkinsが非常に有名であることは周知の事実です。
このラボではJenkinsを使用しCI/CDを実現します。

まずは、各自Jenkinsをデプロイします。

方法としては3つ存在します。

#. Helm Chartでデプロイする方法 (手軽にインストールしたい人向け)
#. Level1,2と同じようにyamlファイルを作成し、デプロイする方法(仕組みをより深く知りたい人向け)
#. Kubernetes用にCI/CDを提供するJenkins Xをデプロイする方法(新しい物を使いたい人向け)

今回は最初のHelmでデプロイするバージョンを記載しました。
好みのもの、学習したい内容に沿って選択してください。

また、今回はkubernetesクラスタ外のネットワークからアクセスできるようにIngressも作成します。
そのため、Jenkinsを作成する際にはJenkinsのService内のtypeはNodePort指定で作成をします。

オリジナルでyamlファイルを作成する場合は以下のサイトが参考になります。

    https://cloud.google.com/solutions/jenkins-on-kubernetes-engine

Helmでデプロイする場合
-------------------------------------------------------------

.. include:: helm-install.rst


以上で、Jenkinsのデプロイが完了しました。

Jenkinsの設定をする
=============================================================

Gitリポジトリに変更があったら自動でテストを実行するジョブを定義します。
このテストは任意で作成してください。

ここでやりたいことは該当リポジトリにコミットがあり、リリースタグが付与された場合に自動でビルド・デプロイを剃る流れを作成することです。
そのためにはまずJenkins側でリポジトリに何か操作があった場合に動作をすることを定義します。

定義出来る動作としては以下の単位が考えられます。
細かく設定することも可能です。運用に合わせた単位で設定します。

* pull request 単位
* release tag 単位
* 定期実行

リリースタグをつけた時点で自動でリリース候補とする
=============================================================

Jenkinsの設定




アプリケーションの変更
=============================================================

上記まででCI/CDのパイプラインを作成したら実際アプリケーションを変更しデプロイします。

稼働しているかを確認します。

アプリケーションの変更
=============================================================

個別のアプリケーションデプロイメントからHelm Chartを使ったデプロイメントに変更します。
ここでは

開発/ステージング/本番を分けてデプロイする。
=============================================================




Blue/Green, Canary をリリースする。
=============================================================


Blue/Green
-------------------------------------------------------------



Canary
-------------------------------------------------------------



まとめ
=============================================================

このラボではコンテナ化したアプリケーションのCI/CDパイプラインの構築に挑戦しました。
CI/CDパイプラインを作成するためのJenkins/GitLabをインストールするために必要なHelmの使い方、アプリケーションを外部に公開するためのkubernetesオブジェクトのIngressも併せて使えるようになりました。

ここまでで Level3 は終了です。
