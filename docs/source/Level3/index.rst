==============================================================
Level 3: CI／CDパイプラインを構築
==============================================================

このレベルでは Level1, Level2 で行ったオペレーションをCI/CD パイプラインを構築します。
以下のシナリオでは

Gitは共有で準備しています。

* Git: 192.168.1.100 (TBD)

ここでは Jenkins を k8s 上にデプロイしてみましょう。

このレベルで習得できるもの
=============================================================

.. image:: resources/cicd_pipeline.png

* アプリケーションをコンテナ化後に自動テスト、自動デプロイできるようにする
* CI/CDパイプラインを作成する
* 副次的にHelmの使い方を習得


Jenkinsのデプロイ
=============================================================

CI/CDパイプラインを実現するためのツールとしてJenkinsが非常に有名であることは周知の事実です。
このラボではJenkinsを使用しCI/CDを実現します。

まずは、各自Jenkinsをデプロイします。

方法としては3つ存在します。

#. Helm Chartでデプロイする方法 (手軽にインストールしたい人向け)
#. Level1,2と同じようにyamlファイルを作成し、デプロイする方法(仕組みをより深く知りたい人向け)
#. Kubernetes用にCI/CDを提供するJenkins Xをデプロイする不法(新しい物を使いたい人向け)

以下に上記3つの方法について記載いたしました。
好みのもの、学習したい内容に沿って選択してください。

Helmでデプロイする場合
-------------------------------------------------------------

.. include:: helm-install.rst

yamlファイルを作成しデプロイする場合
-------------------------------------------------------------

.. include:: yaml-install.rst

Jenkins Xをデプロイする場合
-------------------------------------------------------------

.. include:: jx-install.rst


以上で、Jenkinsのデプロイが完了しました。

JenkinsにWebhookを設定する
=============================================================

Gitリポジトリに変更があったら自動でテストを実行するジョブを定義します。
このテストは任意で作成してください。

ここでやりたいことは該当リポジトリにコミットがあり、リリースタグが付与された場合に自動でビルド・デプロイを剃る流れを作成することです。
そのためにはまずJenkins側でリポジトリに何か操作があった場合に動作をすることを定義します。

* pull request 単位
* release tag 単位


リリースタグをつけた時点で自動でリリース候補とする
=============================================================

Jenkinsの設定


アプリケーションの変更
=============================================================

上記まででCI/CDのパイプラインを作成したら実際アプリケーションを変更しデプロイします。

稼働しているかを確認します。


開発/ステージング/本番を分けてデプロイする。
=============================================================




Blue/Green, Canary をリリースする。
=============================================================




ここまでで Level3 は終了です。
